[{"/home/subin/hackerthon/enact/src/index.js":"1","/home/subin/hackerthon/enact/src/App/App.js":"2","/home/subin/hackerthon/enact/src/App/attachErrorHandler.js":"3","/home/subin/hackerthon/enact/src/views/MainPanel.js":"4","/home/subin/hackerthon/enact/src/components/MainTabLayout.js":"5","/home/subin/hackerthon/enact/src/views/ListPanel.js":"6","/home/subin/hackerthon/enact/src/views/TimerPanel.js":"7","/home/subin/hackerthon/enact/src/views/CalendarPanel.js":"8","/home/subin/hackerthon/enact/src/views/RecipePanel.js":"9","/home/subin/hackerthon/enact/src/views/ScanPanel.js":"10","/home/subin/hackerthon/enact/src/views/HomePanel.js":"11","/home/subin/hackerthon/enact/src/components/Scanner.js":"12","/home/subin/hackerthon/enact/src/components/ScanDetails.js":"13","/home/subin/hackerthon/enact/src/components/ScanInput.js":"14","/home/subin/hackerthon/enact/src/components/RecipeDetails.js":"15","/home/subin/hackerthon/enact/src/components/Random.js":"16","/home/subin/hackerthon/enact/src/components/Meal.js":"17","/home/subin/hackerthon/enact/src/components/Alert.js":"18","/home/subin/hackerthon/enact/src/components/List.js":"19","/home/subin/hackerthon/enact/src/components/Timer/Timer.js":"20","/home/subin/hackerthon/enact/src/components/Timer/TimerTemplate/TimerTemplate.js":"21","/home/subin/hackerthon/enact/src/components/Timer/Form/Form.js":"22","/home/subin/hackerthon/enact/src/components/Timer/Button/Button.js":"23"},{"size":269,"mtime":1626767205927,"results":"24","hashOfConfig":"25"},{"size":470,"mtime":1627649764580,"results":"26","hashOfConfig":"25"},{"size":811,"mtime":1626668951356,"results":"27","hashOfConfig":"25"},{"size":299,"mtime":1626857274776,"results":"28","hashOfConfig":"25"},{"size":1357,"mtime":1626857274776,"results":"29","hashOfConfig":"25"},{"size":517,"mtime":1628136811409,"results":"30","hashOfConfig":"25"},{"size":342,"mtime":1627894759150,"results":"31","hashOfConfig":"25"},{"size":1976,"mtime":1628140340151,"results":"32","hashOfConfig":"25"},{"size":2869,"mtime":1627979362971,"results":"33","hashOfConfig":"25"},{"size":2465,"mtime":1628070762475,"results":"34","hashOfConfig":"25"},{"size":772,"mtime":1628070765879,"results":"35","hashOfConfig":"25"},{"size":1895,"mtime":1627977892434,"results":"36","hashOfConfig":"25"},{"size":424,"mtime":1628053984233,"results":"37","hashOfConfig":"25"},{"size":1439,"mtime":1627977892434,"results":"38","hashOfConfig":"25"},{"size":514,"mtime":1627982073900,"results":"39","hashOfConfig":"25"},{"size":633,"mtime":1627897346149,"results":"40","hashOfConfig":"25"},{"size":1013,"mtime":1627989880223,"results":"41","hashOfConfig":"25"},{"size":166,"mtime":1627977967743,"results":"42","hashOfConfig":"25"},{"size":363,"mtime":1628070765879,"results":"43","hashOfConfig":"25"},{"size":4027,"mtime":1627894759150,"results":"44","hashOfConfig":"25"},{"size":835,"mtime":1627894759150,"results":"45","hashOfConfig":"25"},{"size":1556,"mtime":1627894759150,"results":"46","hashOfConfig":"25"},{"size":1669,"mtime":1627894759146,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"cvs9n3",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"66","usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},"/home/subin/hackerthon/enact/src/index.js",[],["102","103","104"],"/home/subin/hackerthon/enact/src/App/App.js",[],"/home/subin/hackerthon/enact/src/App/attachErrorHandler.js",[],"/home/subin/hackerthon/enact/src/views/MainPanel.js",[],"/home/subin/hackerthon/enact/src/components/MainTabLayout.js",[],"/home/subin/hackerthon/enact/src/views/ListPanel.js",["105"],"import kind from '@enact/core/kind';\nimport { Header, Panel } from '@enact/sandstone/Panels';\nimport Scroller from '@enact/sandstone/Scroller';\n\nimport ShowList from '../components/List';\n\nconst ListPanel = kind({\n  name: 'ListPanel',\n\n  render: props => (\n    <Panel {...props}>\n      <Scroller>\n        <ShowList name={'apple'} number={3} expirationDate={'2021-09-03'} />\n        <ShowList name={'plum'} number={5} expirationDate={'2021-08-23'} />\n      </Scroller>\n    </Panel>\n  ),\n});\n\nexport default ListPanel;\n","/home/subin/hackerthon/enact/src/views/TimerPanel.js",[],"/home/subin/hackerthon/enact/src/views/CalendarPanel.js",["106","107","108","109"],"import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport googleCalendarPlugin from '@fullcalendar/google-calendar';\nimport Scroller from '@enact/sandstone/Scroller';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\n\nexport default function CalendarApp({ name, expirationDate }) {\n  const calEventSources = [\n    {\n      googleCalendarId: 'hkhh972123@google.com',\n      backgroundColor: '#f5dfe2',\n      rendering: 'background',\n      textColor: '#FFFFFF',\n    },\n  ];\n\n  const event = {\n    title: { name },\n    end: { expirationDate },\n  };\n\n  const events = [\n    { title: 'apple', date: new Date('2021/09/03') },\n    { title: 'plum', date: new Date('2021-08-23') },\n  ];\n\n  return (\n    <Scroller>\n      <div className=\"CalendarApp\">\n        <div className=\"Calendar\">\n          <FullCalendar\n            defaultView=\"dayGridMonth\"\n            headerToolbar={{\n              left: 'prev,next',\n              center: 'title',\n              right: 'dayGridMonth,timeGridWeek,timeGridDay',\n            }}\n            plugins={[\n              dayGridPlugin,\n              timeGridPlugin,\n              interactionPlugin,\n              googleCalendarPlugin,\n            ]}\n            editable={true}\n            eventSources={calEventSources}\n            googleCalendarApiKey={'AIzaSyCpC0bTrytCsEVyVZDKrHK1_1h5RloRYWc'}\n            events={events}\n            eventDrop={info => {\n              const { start, end } = info.oldEvent._instance.range;\n              console.log(start, end);\n              const { start: newStart, end: newEnd } =\n                info.event._instance.range;\n              console.log(newStart, newEnd);\n              if (new Date(start).getDate() === new Date(newStart).getDate()) {\n                info.revert();\n              }\n            }}\n          />\n        </div>\n      </div>\n    </Scroller>\n  );\n}\n","/home/subin/hackerthon/enact/src/views/RecipePanel.js",[],"/home/subin/hackerthon/enact/src/views/ScanPanel.js",["110","111"],"import Scanner from '../components/Scanner.js';\nimport ReactDOM from 'react-dom';\nimport Button from '@enact/sandstone/Button';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nimport './ScanPanel.css';\nimport ScanDetails from '../components/ScanDetails.js';\nimport ScanInput from '../components/ScanInput.js';\n\nfunction ScanPanel() {\n  const [camera, setCamera] = useState(false);\n  const [result, setResult] = useState(''); //null\n\n  const [BAR_CD, setData] = useState('');\n  const [query, setQuery] = useState(''); //8809359120061\n  const open_url =\n    'http://openapi.foodsafetykorea.go.kr/api/sample/C005/json/1/5/BAR_CD=' +\n    query;\n\n  const [PRDLST_NM, setPRDLST_NM] = useState('');\n  const [POG_DAYCNT, setPOG_DAYCNT] = useState('');\n\n  // eslint-disable-next-line\n  const onDetected = result => {\n    setResult(result);\n    setQuery(result);\n  };\n\n  useEffect(() => {\n    let completed = false; //query, Variables to ensure search results are complete\n    const get = async () => {\n      if (!completed) {\n        // if(query!==''){\n        let respon = await axios(open_url);\n        if (respon.data.C005.RESULT.CODE === 'INFO-000') {\n          // setData(respon.data.C005.row[0]);\n          setData(respon.data.C005.row[0].BAR_CD);\n          setPRDLST_NM('<' + respon.data.C005.row[0].PRDLST_NM + '>');\n          setPOG_DAYCNT(respon.data.C005.row[0].POG_DAYCNT);\n        } else {\n          // setAlert('');\n          setData(result);\n          setPRDLST_NM('No match data');\n          setPOG_DAYCNT('');\n        }\n      }\n    };\n    get();\n    return () => {\n      completed = true;\n    };\n  });\n\n  // const handleChange = ({target:{value}}) => setDate(value)\n  return (\n    <div className=\"App2\">\n      {/* <div>{setCamera(!camera)}</div> */}\n      {/* eslint-disable-next-line */}\n      <Button size=\"small\" onClick={() => setCamera(!camera)}>\n        {camera ? 'Stop' : 'Start'}\n      </Button>\n      {/* eslint-disable-next-line */}\n      <div className=\"container\">\n        {/* eslint-disable-next-line */}\n        {camera && <Scanner onDetected={onDetected} />}\n      </div>\n      <div className=\"Product\">\n        <ScanDetails\n          name={PRDLST_NM}\n          barcode={BAR_CD}\n          expirationDate={POG_DAYCNT}\n        />\n      </div>\n      {/* <ScanInput/> */}\n    </div>\n  );\n}\n\n// const rootElement = document.getElementById('root');\n// ReactDOM.render(<ScanPanel />, rootElement);\nexport default ScanPanel;\n","/home/subin/hackerthon/enact/src/views/HomePanel.js",["112","113","114"],"\nimport kind from \"@enact/core/kind\";\nimport { Header, Panel } from \"@enact/sandstone/Panels\";\nimport Button from '@enact/sandstone/Button';\n\nconst HomePanel = kind({\n  name: 'HomePanel',\n\n  render: (props) => (\n      <Panel {...props}>\n          <Header title=\"fruit/rotten recognition\" />\n          <Button size=\"small\" onClick={(e) => {\n            e.preventDefault();\n            window.location.href='http://localhost:3000/';\n          }}>\n            rotten recognition\n          </Button>\n          <Button size=\"small\" onClick={(e) => {\n            e.preventDefault();\n            window.location.href='http://localhost:7000/fruit.html';\n          }}>\n            fruit recognition\n          </Button>\n          \n      </Panel>\n  )\n\n});\n\nexport default HomePanel;\n","/home/subin/hackerthon/enact/src/components/Scanner.js",["115"],"import { useEffect } from \"react\";\nimport config from \"./config.json\";\nimport Quagga from \"quagga\";\n\nconst Scanner = props => {\n  const { onDetected } = props;\n  const detected = result => {\n    onDetected(result.codeResult.code);\n  };\n  useEffect(() => {\n    Quagga.init(config, err => {\n      if (err) {\n        console.log(err, \"error msg\");\n      }\n      Quagga.start();\n      return () => {\n        Quagga.stop()\n      }\n    });\n\n    //detecting boxes on stream\n    Quagga.onProcessed(result => {\n      let drawingCtx = Quagga.canvas.ctx.overlay,\n        drawingCanvas = Quagga.canvas.dom.overlay;\n\n      if (result) {\n        if (result.boxes) {\n          drawingCtx.clearRect(\n            0,\n            0,\n            Number(drawingCanvas.getAttribute(\"width\")),\n            Number(drawingCanvas.getAttribute(\"height\"))\n          );\n          result.boxes\n            .filter(function(box) {\n              return box !== result.box;\n            })\n            .forEach(function(box) {\n              Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, {\n                color: \"green\",\n                lineWidth: 2\n              });\n            });\n        }\n\n        if (result.box) {\n          Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, {\n            color: \"#00F\",\n            lineWidth: 2\n          });\n        }\n\n        if (result.codeResult && result.codeResult.code) {\n          Quagga.ImageDebug.drawPath(\n            result.line,\n            { x: \"x\", y: \"y\" },\n            drawingCtx,\n            { color: \"red\", lineWidth: 3 }\n          );\n        }\n      }\n    });\n    Quagga.onDetected(detected);\n  }, []);\n\n  return (\n    // If you do not specify a target,\n    // QuaggaJS would look for an element that matches\n    // the CSS selector #interactive.viewport\n    <div id=\"interactive\" className=\"viewport\" />\n  );\n};\n\nexport default Scanner;\n","/home/subin/hackerthon/enact/src/components/ScanDetails.js",[],"/home/subin/hackerthon/enact/src/components/ScanInput.js",["116","117","118"],"import { useState } from 'react';\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst ScanInput =()=>{\n    const [LastDate, setLastDate]=useState(new Date());\n    return(\n        <div>\n            <label style={{fontSize:20}}>Expiration Date &nbsp;</label>\n            <DatePicker \n            selected={LastDate}\n            onChange={date => setLastDate(date)}\n            /> \n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <input type=\"submit\" value=\"Submit\" />\n        </div>\n    );\n};\n\n// function ScanInput(){\n    // const [date, setDate] = useState('');\n    // const handleChange = e =>{\n    //     console.log(e.target.value);\n    //     // setDate(e.target.value);\n    // };\n    // const handleSubmit = e =>{\n    //     e.preventDefault();\n    //     console.log('date : ' + {date});\n    //     //db give and ...\n    //     // setDate('');\n    // };\n    // return (\n    //     <form onSubmit={handleSubmit} className=\"searchForm\">\n    //         <input\n    //             type=\"text\"\n    //             name=\"date\"\n    //             onChange={handleChange}\n    //             value={date}\n    //             placeholder=\"expirationDate(2021.08.02)\"\n    //             autoComplete=\"off\"\n    //         />\n    //         <input type=\"submit\" value=\"Submit\" />\n    //     </form>\n    // );\n\n\n\n// }\nexport default ScanInput;","/home/subin/hackerthon/enact/src/components/RecipeDetails.js",[],"/home/subin/hackerthon/enact/src/components/Random.js",[],"/home/subin/hackerthon/enact/src/components/Meal.js",[],"/home/subin/hackerthon/enact/src/components/Alert.js",[],"/home/subin/hackerthon/enact/src/components/List.js",[],"/home/subin/hackerthon/enact/src/components/Timer/Timer.js",[],"/home/subin/hackerthon/enact/src/components/Timer/TimerTemplate/TimerTemplate.js",[],"/home/subin/hackerthon/enact/src/components/Timer/Form/Form.js",[],"/home/subin/hackerthon/enact/src/components/Timer/Button/Button.js",[],["119","120","121"],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":16},{"ruleId":"128","severity":1,"message":"132","line":1,"column":8,"nodeType":"130","messageId":"131","endLine":1,"endColumn":13},{"ruleId":"128","severity":1,"message":"133","line":19,"column":9,"nodeType":"130","messageId":"131","endLine":19,"endColumn":14},{"ruleId":"134","severity":1,"message":"135","line":46,"column":13,"nodeType":"136","endLine":46,"endColumn":28,"fix":"137"},{"ruleId":"138","severity":1,"message":"139","line":50,"column":13,"nodeType":"136","endLine":59,"endColumn":15},{"ruleId":"128","severity":1,"message":"140","line":2,"column":8,"nodeType":"130","messageId":"131","endLine":2,"endColumn":16},{"ruleId":"128","severity":1,"message":"141","line":9,"column":8,"nodeType":"130","messageId":"131","endLine":9,"endColumn":17},{"ruleId":"138","severity":1,"message":"139","line":12,"column":32,"nodeType":"136","endLine":15,"endColumn":13},{"ruleId":"138","severity":1,"message":"139","line":18,"column":32,"nodeType":"136","endLine":21,"endColumn":13},{"ruleId":"142","severity":1,"message":"143","line":24,"column":1,"nodeType":"144","messageId":"145","endLine":24,"endColumn":11,"fix":"146"},{"ruleId":"147","severity":1,"message":"148","line":64,"column":6,"nodeType":"149","endLine":64,"endColumn":8,"suggestions":"150"},{"ruleId":"142","severity":1,"message":"143","line":11,"column":24,"nodeType":"144","messageId":"145","endLine":11,"endColumn":25,"fix":"151"},{"ruleId":"138","severity":1,"message":"139","line":13,"column":13,"nodeType":"136","endLine":13,"endColumn":49},{"ruleId":"142","severity":1,"message":"143","line":14,"column":15,"nodeType":"144","messageId":"145","endLine":14,"endColumn":16,"fix":"152"},{"ruleId":"122","replacedBy":"153"},{"ruleId":"124","replacedBy":"154"},{"ruleId":"126","replacedBy":"155"},"no-catch-shadow",["156"],"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","'event' is assigned a value but never used.","react/jsx-boolean-value","Value must be omitted for boolean attributes","JSXAttribute",{"range":"159","text":"160"},"react/jsx-no-bind","JSX props should not use arrow functions","'ReactDOM' is defined but never used.","'ScanInput' is defined but never used.","no-trailing-spaces","Trailing spaces not allowed.","Program","trailingSpace",{"range":"161","text":"160"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'detected'. Either include it or remove the dependency array.","ArrayExpression",["162"],{"range":"163","text":"160"},{"range":"164","text":"160"},["156"],["157"],["158"],"no-shadow","no-global-assign","no-unsafe-negation",[1330,1337],"",[710,720],{"desc":"165","fix":"166"},[332,333],[429,430],"Update the dependencies array to be: [detected]",{"range":"167","text":"168"},[1655,1657],"[detected]"]