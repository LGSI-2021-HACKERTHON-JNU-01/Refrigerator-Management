[{"D:\\kaggleDataset\\github\\enact\\src\\index.js":"1","D:\\kaggleDataset\\github\\enact\\src\\App\\App.js":"2","D:\\kaggleDataset\\github\\enact\\src\\App\\attachErrorHandler.js":"3","D:\\kaggleDataset\\github\\enact\\src\\views\\MainPanel.js":"4","D:\\kaggleDataset\\github\\enact\\src\\components\\MainTabLayout.js":"5","D:\\kaggleDataset\\github\\enact\\src\\views\\TimerPanel.js":"6","D:\\kaggleDataset\\github\\enact\\src\\views\\HomePanel.js":"7","D:\\kaggleDataset\\github\\enact\\src\\views\\ListPanel.js":"8","D:\\kaggleDataset\\github\\enact\\src\\views\\ScanPanel.js":"9","D:\\kaggleDataset\\github\\enact\\src\\views\\RecipePanel.js":"10","D:\\kaggleDataset\\github\\enact\\src\\views\\CalendarPanel.js":"11","D:\\kaggleDataset\\github\\enact\\src\\components\\Timer\\Timer.js":"12","D:\\kaggleDataset\\github\\enact\\src\\components\\RecipeDetails.js":"13","D:\\kaggleDataset\\github\\enact\\src\\components\\Alert.js":"14","D:\\kaggleDataset\\github\\enact\\src\\components\\ScanDetails.js":"15","D:\\kaggleDataset\\github\\enact\\src\\components\\ScanInput.js":"16","D:\\kaggleDataset\\github\\enact\\src\\components\\Scanner.js":"17","D:\\kaggleDataset\\github\\enact\\src\\components\\List.js":"18","D:\\kaggleDataset\\github\\enact\\src\\components\\Meal.js":"19","D:\\kaggleDataset\\github\\enact\\src\\components\\Random.js":"20","D:\\kaggleDataset\\github\\enact\\src\\components\\Timer\\TimerTemplate\\TimerTemplate.js":"21","D:\\kaggleDataset\\github\\enact\\src\\components\\Timer\\Form\\Form.js":"22","D:\\kaggleDataset\\github\\enact\\src\\components\\Timer\\Button\\Button.js":"23"},{"size":280,"mtime":1627885578666,"results":"24","hashOfConfig":"25"},{"size":496,"mtime":1627885577875,"results":"26","hashOfConfig":"25"},{"size":840,"mtime":1627885577876,"results":"27","hashOfConfig":"25"},{"size":315,"mtime":1627885578680,"results":"28","hashOfConfig":"25"},{"size":1402,"mtime":1627885577886,"results":"29","hashOfConfig":"25"},{"size":358,"mtime":1627888797251,"results":"30","hashOfConfig":"25"},{"size":802,"mtime":1628057351494,"results":"31","hashOfConfig":"25"},{"size":537,"mtime":1628059845465,"results":"32","hashOfConfig":"25"},{"size":2547,"mtime":1628059845547,"results":"33","hashOfConfig":"25"},{"size":2971,"mtime":1628059845487,"results":"34","hashOfConfig":"25"},{"size":1003,"mtime":1628059845464,"results":"35","hashOfConfig":"25"},{"size":4204,"mtime":1627888797246,"results":"36","hashOfConfig":"25"},{"size":534,"mtime":1627885577890,"results":"37","hashOfConfig":"25"},{"size":177,"mtime":1627885577877,"results":"38","hashOfConfig":"25"},{"size":444,"mtime":1628059845417,"results":"39","hashOfConfig":"25"},{"size":1488,"mtime":1628059845417,"results":"40","hashOfConfig":"25"},{"size":1969,"mtime":1628059845444,"results":"41","hashOfConfig":"25"},{"size":380,"mtime":1628059845218,"results":"42","hashOfConfig":"25"},{"size":1050,"mtime":1628059845322,"results":"43","hashOfConfig":"25"},{"size":661,"mtime":1628059845416,"results":"44","hashOfConfig":"25"},{"size":869,"mtime":1627888797247,"results":"45","hashOfConfig":"25"},{"size":1616,"mtime":1627888797245,"results":"46","hashOfConfig":"25"},{"size":1727,"mtime":1627888797243,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"p74uhs",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\kaggleDataset\\github\\enact\\src\\index.js",[],["101","102","103"],"D:\\kaggleDataset\\github\\enact\\src\\App\\App.js",[],"D:\\kaggleDataset\\github\\enact\\src\\App\\attachErrorHandler.js",[],"D:\\kaggleDataset\\github\\enact\\src\\views\\MainPanel.js",[],"D:\\kaggleDataset\\github\\enact\\src\\components\\MainTabLayout.js",[],"D:\\kaggleDataset\\github\\enact\\src\\views\\TimerPanel.js",[],"D:\\kaggleDataset\\github\\enact\\src\\views\\HomePanel.js",["104","105","106"],"\r\nimport kind from \"@enact/core/kind\";\r\nimport { Header, Panel } from \"@enact/sandstone/Panels\";\r\nimport Button from '@enact/sandstone/Button';\r\n\r\nconst HomePanel = kind({\r\n  name: 'HomePanel',\r\n\r\n  render: (props) => (\r\n      <Panel {...props}>\r\n          <Header title=\"fruit/rotten recognition\" />\r\n          <Button size=\"small\" onClick={(e) => {\r\n            e.preventDefault();\r\n            window.location.href='http://localhost:3000/';\r\n          }}>\r\n            rotten recognition\r\n          </Button>\r\n          <Button size=\"small\" onClick={(e) => {\r\n            e.preventDefault();\r\n            window.location.href='http://localhost:7000/fruit.html';\r\n          }}>\r\n            fruit recognition\r\n          </Button>\r\n          \r\n      </Panel>\r\n  )\r\n\r\n});\r\n\r\nexport default HomePanel;\r\n","D:\\kaggleDataset\\github\\enact\\src\\views\\ListPanel.js",["107"],"import kind from '@enact/core/kind';\r\nimport { Header, Panel } from '@enact/sandstone/Panels';\r\nimport Scroller from '@enact/sandstone/Scroller';\r\n\r\nimport ShowList from '../components/List';\r\n\r\nconst ListPanel = kind({\r\n  name: 'ListPanel',\r\n\r\n  render: props => (\r\n    <Panel {...props}>\r\n      <Scroller>\r\n        <ShowList name={'apple'} number={3} expirationDate={'2021-09-03'} />\r\n        <ShowList name={'plum'} number={5} expirationDate={'2021-08-23'} />\r\n      </Scroller>\r\n    </Panel>\r\n  ),\r\n});\r\n\r\nexport default ListPanel;\r\n","D:\\kaggleDataset\\github\\enact\\src\\views\\ScanPanel.js",["108","109"],"import Scanner from '../components/Scanner.js';\r\nimport ReactDOM from 'react-dom';\r\nimport Button from '@enact/sandstone/Button';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport './ScanPanel.css';\r\nimport ScanDetails from '../components/ScanDetails.js';\r\nimport ScanInput from '../components/ScanInput.js';\r\n\r\nfunction ScanPanel() {\r\n  const [camera, setCamera] = useState(false);\r\n  const [result, setResult] = useState(''); //null\r\n\r\n  const [BAR_CD, setData] = useState('');\r\n  const [query, setQuery] = useState(''); //8809359120061\r\n  const open_url =\r\n    'http://openapi.foodsafetykorea.go.kr/api/sample/C005/json/1/5/BAR_CD=' +\r\n    query;\r\n\r\n  const [PRDLST_NM, setPRDLST_NM] = useState('');\r\n  const [POG_DAYCNT, setPOG_DAYCNT] = useState('');\r\n\r\n  // eslint-disable-next-line\r\n  const onDetected = result => {\r\n    setResult(result);\r\n    setQuery(result);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let completed = false; //query, Variables to ensure search results are complete\r\n    const get = async () => {\r\n      if (!completed) {\r\n        // if(query!==''){\r\n        let respon = await axios(open_url);\r\n        if (respon.data.C005.RESULT.CODE === 'INFO-000') {\r\n          // setData(respon.data.C005.row[0]);\r\n          setData(respon.data.C005.row[0].BAR_CD);\r\n          setPRDLST_NM('<' + respon.data.C005.row[0].PRDLST_NM + '>');\r\n          setPOG_DAYCNT(respon.data.C005.row[0].POG_DAYCNT);\r\n        } else {\r\n          // setAlert('');\r\n          setData(result);\r\n          setPRDLST_NM('No match data');\r\n          setPOG_DAYCNT('');\r\n        }\r\n      }\r\n    };\r\n    get();\r\n    return () => {\r\n      completed = true;\r\n    };\r\n  });\r\n\r\n  // const handleChange = ({target:{value}}) => setDate(value)\r\n  return (\r\n    <div className=\"App2\">\r\n      {/* <div>{setCamera(!camera)}</div> */}\r\n      {/* eslint-disable-next-line */}\r\n      <Button size=\"small\" onClick={() => setCamera(!camera)}>\r\n        {camera ? 'Stop' : 'Start'}\r\n      </Button>\r\n      {/* eslint-disable-next-line */}\r\n      <div className=\"container\">\r\n        {/* eslint-disable-next-line */}\r\n        {camera && <Scanner onDetected={onDetected} />}\r\n      </div>\r\n      <div className=\"Product\">\r\n        <ScanDetails\r\n          name={PRDLST_NM}\r\n          barcode={BAR_CD}\r\n          expirationDate={POG_DAYCNT}\r\n        />\r\n      </div>\r\n      {/* <ScanInput/> */}\r\n    </div>\r\n  );\r\n}\r\n\r\n// const rootElement = document.getElementById('root');\r\n// ReactDOM.render(<ScanPanel />, rootElement);\r\nexport default ScanPanel;\r\n","D:\\kaggleDataset\\github\\enact\\src\\views\\RecipePanel.js",[],"D:\\kaggleDataset\\github\\enact\\src\\views\\CalendarPanel.js",["110","111"],"import React from 'react';\r\nimport Calendar from '@ericz1803/react-google-calendar';\r\nimport { css, withTheme } from '@emotion/react';\r\n//import { Injectable } from '@angular/core';\r\n//import { Observable } from 'rxjs';\r\n//import { AngularFireAuth } from '@angular/fire/auth';\r\n//import { auth } from 'firebase/app';\r\n\r\nconst API_KEY = 'AIzaSyCpC0bTrytCsEVyVZDKrHK1_1h5RloRYWc';\r\n\r\nlet calendars = [{ calendarId: 'hkhh972123@gmail.com' }];\r\n\r\nlet styles = {\r\n  calendar: {\r\n    borderWidth: '3px',\r\n    width: '80%',\r\n    paddingTop: '33px',\r\n    paddingBottom: '53px',\r\n    margin: 'auto',\r\n    maxWidth: '900px',\r\n    color: '#EFFBEF',\r\n  },\r\n\r\n  eventText: {\r\n    color: '#EFFBEF',\r\n  },\r\n\r\n  today: css`\r\n    color: red;\r\n    border: 3px solid red;\r\n  `,\r\n};\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"calendar\">\r\n      <body>\r\n        <div>\r\n          <Calendar apiKey={API_KEY} calendars={calendars} styles={styles} />\r\n        </div>\r\n      </body>\r\n    </div>\r\n  );\r\n}\r\n","D:\\kaggleDataset\\github\\enact\\src\\components\\Timer\\Timer.js",[],"D:\\kaggleDataset\\github\\enact\\src\\components\\RecipeDetails.js",[],"D:\\kaggleDataset\\github\\enact\\src\\components\\Alert.js",[],"D:\\kaggleDataset\\github\\enact\\src\\components\\ScanDetails.js",[],"D:\\kaggleDataset\\github\\enact\\src\\components\\ScanInput.js",["112","113","114"],"import { useState } from 'react';\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst ScanInput =()=>{\r\n    const [LastDate, setLastDate]=useState(new Date());\r\n    return(\r\n        <div>\r\n            <label style={{fontSize:20}}>Expiration Date &nbsp;</label>\r\n            <DatePicker \r\n            selected={LastDate}\r\n            onChange={date => setLastDate(date)}\r\n            /> \r\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n            <input type=\"submit\" value=\"Submit\" />\r\n        </div>\r\n    );\r\n};\r\n\r\n// function ScanInput(){\r\n    // const [date, setDate] = useState('');\r\n    // const handleChange = e =>{\r\n    //     console.log(e.target.value);\r\n    //     // setDate(e.target.value);\r\n    // };\r\n    // const handleSubmit = e =>{\r\n    //     e.preventDefault();\r\n    //     console.log('date : ' + {date});\r\n    //     //db give and ...\r\n    //     // setDate('');\r\n    // };\r\n    // return (\r\n    //     <form onSubmit={handleSubmit} className=\"searchForm\">\r\n    //         <input\r\n    //             type=\"text\"\r\n    //             name=\"date\"\r\n    //             onChange={handleChange}\r\n    //             value={date}\r\n    //             placeholder=\"expirationDate(2021.08.02)\"\r\n    //             autoComplete=\"off\"\r\n    //         />\r\n    //         <input type=\"submit\" value=\"Submit\" />\r\n    //     </form>\r\n    // );\r\n\r\n\r\n\r\n// }\r\nexport default ScanInput;","D:\\kaggleDataset\\github\\enact\\src\\components\\Scanner.js",["115"],"import { useEffect } from \"react\";\r\nimport config from \"./config.json\";\r\nimport Quagga from \"quagga\";\r\n\r\nconst Scanner = props => {\r\n  const { onDetected } = props;\r\n  const detected = result => {\r\n    onDetected(result.codeResult.code);\r\n  };\r\n  useEffect(() => {\r\n    Quagga.init(config, err => {\r\n      if (err) {\r\n        console.log(err, \"error msg\");\r\n      }\r\n      Quagga.start();\r\n      return () => {\r\n        Quagga.stop()\r\n      }\r\n    });\r\n\r\n    //detecting boxes on stream\r\n    Quagga.onProcessed(result => {\r\n      let drawingCtx = Quagga.canvas.ctx.overlay,\r\n        drawingCanvas = Quagga.canvas.dom.overlay;\r\n\r\n      if (result) {\r\n        if (result.boxes) {\r\n          drawingCtx.clearRect(\r\n            0,\r\n            0,\r\n            Number(drawingCanvas.getAttribute(\"width\")),\r\n            Number(drawingCanvas.getAttribute(\"height\"))\r\n          );\r\n          result.boxes\r\n            .filter(function(box) {\r\n              return box !== result.box;\r\n            })\r\n            .forEach(function(box) {\r\n              Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, {\r\n                color: \"green\",\r\n                lineWidth: 2\r\n              });\r\n            });\r\n        }\r\n\r\n        if (result.box) {\r\n          Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, {\r\n            color: \"#00F\",\r\n            lineWidth: 2\r\n          });\r\n        }\r\n\r\n        if (result.codeResult && result.codeResult.code) {\r\n          Quagga.ImageDebug.drawPath(\r\n            result.line,\r\n            { x: \"x\", y: \"y\" },\r\n            drawingCtx,\r\n            { color: \"red\", lineWidth: 3 }\r\n          );\r\n        }\r\n      }\r\n    });\r\n    Quagga.onDetected(detected);\r\n  }, []);\r\n\r\n  return (\r\n    // If you do not specify a target,\r\n    // QuaggaJS would look for an element that matches\r\n    // the CSS selector #interactive.viewport\r\n    <div id=\"interactive\" className=\"viewport\" />\r\n  );\r\n};\r\n\r\nexport default Scanner;\r\n","D:\\kaggleDataset\\github\\enact\\src\\components\\List.js",[],"D:\\kaggleDataset\\github\\enact\\src\\components\\Meal.js",[],"D:\\kaggleDataset\\github\\enact\\src\\components\\Random.js",[],"D:\\kaggleDataset\\github\\enact\\src\\components\\Timer\\TimerTemplate\\TimerTemplate.js",[],"D:\\kaggleDataset\\github\\enact\\src\\components\\Timer\\Form\\Form.js",[],"D:\\kaggleDataset\\github\\enact\\src\\components\\Timer\\Button\\Button.js",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":12,"column":32,"nodeType":"124","endLine":15,"endColumn":13},{"ruleId":"122","severity":1,"message":"123","line":18,"column":32,"nodeType":"124","endLine":21,"endColumn":13},{"ruleId":"125","severity":1,"message":"126","line":24,"column":1,"nodeType":"127","messageId":"128","endLine":24,"endColumn":11,"fix":"129"},{"ruleId":"130","severity":1,"message":"131","line":2,"column":10,"nodeType":"132","messageId":"133","endLine":2,"endColumn":16},{"ruleId":"130","severity":1,"message":"134","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":16},{"ruleId":"130","severity":1,"message":"135","line":9,"column":8,"nodeType":"132","messageId":"133","endLine":9,"endColumn":17},{"ruleId":"130","severity":1,"message":"136","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":13},{"ruleId":"130","severity":1,"message":"137","line":3,"column":15,"nodeType":"132","messageId":"133","endLine":3,"endColumn":24},{"ruleId":"125","severity":1,"message":"126","line":11,"column":24,"nodeType":"127","messageId":"128","endLine":11,"endColumn":25,"fix":"138"},{"ruleId":"122","severity":1,"message":"123","line":13,"column":13,"nodeType":"124","endLine":13,"endColumn":49},{"ruleId":"125","severity":1,"message":"126","line":14,"column":15,"nodeType":"127","messageId":"128","endLine":14,"endColumn":16,"fix":"139"},{"ruleId":"140","severity":1,"message":"141","line":64,"column":6,"nodeType":"142","endLine":64,"endColumn":8,"suggestions":"143"},"no-catch-shadow",["144"],"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"react/jsx-no-bind","JSX props should not use arrow functions","JSXAttribute","no-trailing-spaces","Trailing spaces not allowed.","Program","trailingSpace",{"range":"147","text":"148"},"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'ScanInput' is defined but never used.","'React' is defined but never used.","'withTheme' is defined but never used.",{"range":"149","text":"148"},{"range":"150","text":"148"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'detected'. Either include it or remove the dependency array.","ArrayExpression",["151"],"no-shadow","no-global-assign","no-unsafe-negation",[733,743],"",[342,343],[442,443],{"desc":"152","fix":"153"},"Update the dependencies array to be: [detected]",{"range":"154","text":"155"},[1718,1720],"[detected]"]